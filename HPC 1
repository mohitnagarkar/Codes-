HPC 1(BFS)

#include <iostream>
#include <queue>
#include <omp.h>

using namespace std;

class Node {
public:
    int data;
    Node *left, *right;
    Node(int val) : data(val), left(nullptr), right(nullptr) {}
};

// Function to insert nodes in level order
Node* insert(Node* root, int data) {
    if (!root) {
        return new Node(data);
    }

    queue<Node*> q;
    q.push(root);

    while (!q.empty()) {
        Node* temp = q.front();
        q.pop();

        if (!temp->left) {
            temp->left = new Node(data);
            return root;
        } else {
            q.push(temp->left);
        }

        if (!temp->right) {
            temp->right = new Node(data);
            return root;
        } else {
            q.push(temp->right);
        }
    }
    return root;
}

// Parallel Breadth-First Search (BFS)
void parallel_bfs(Node* root) {
    if (!root) return;

    queue<Node*> q;
    q.push(root);

    cout << "Nodes visited in BFS order: ";
    
    while (!q.empty()) {
        int qSize = q.size();

        #pragma omp parallel for
        for (int i = 0; i < qSize; i++) {
            Node* currNode;

            #pragma omp critical
            {
                currNode = q.front();
                q.pop();
                cout << currNode->data << " ";
            }

            #pragma omp critical
            {
                if (currNode->left) q.push(currNode->left);
                if (currNode->right) q.push(currNode->right);
            }
        }
    }
    cout << endl;
}

int main() {
    Node* root = nullptr;
    int data;
    char ans;

    do {
        cout << "\nEnter data: ";
        cin >> data;
        root = insert(root, data);
        cout << "Do you want to insert another node? (y/n): ";
        cin >> ans;
    } while (ans == 'y' || ans == 'Y');

    parallel_bfs(root);
    return 0;
}





HPC 1(DFS)


#include <iostream>
#include <vector>
#include <stack>
#include <omp.h>

using namespace std;

const int MAX = 100000; // Maximum number of nodes
vector<int> graph[MAX]; // Adjacency list
bool visited[MAX];      // Track visited nodes

// Parallel Depth First Search (DFS)
void parallel_dfs(int start_node) {
    stack<int> s;
    s.push(start_node);

    while (!s.empty()) {
        int curr_node;
        // Protect stack operations using a critical section
        #pragma omp critical
        {
            curr_node = s.top();
            s.pop();
        }
        if (!visited[curr_node]) {
            visited[curr_node] = true;
            cout << curr_node << " ";  // Output visited node
            // Parallel loop to process adjacent nodes
            #pragma omp parallel for
            for (int i = graph[curr_node].size() - 1; i >= 0; i--) { // Reverse order for correct DFS
                int adj_node = graph[curr_node][i];
                // Ensure only unvisited nodes are pushed
                if (!visited[adj_node]) {
                    #pragma omp critical
                    s.push(adj_node);
                }
            }
        }
    }
}
int main() {
    int n, m, start_node;
    cout << "Enter number of nodes, edges, and starting node: ";
    cin >> n >> m >> start_node;
    cout << "Enter " << m << " pairs of edges (u v):\n";
    for (int i = 0; i < m; i++) {
        int u, v;
        cin >> u >> v;
        graph[u].push_back(v);
        graph[v].push_back(u); // Undirected graph
    }
    // Initialize visited array in parallel
    #pragma omp parallel for
    for (int i = 0; i < n; i++) {
        visited[i] = false;
    }
    cout << "Nodes visited in DFS order: ";
    parallel_dfs(start_node);
    cout << endl;
    return 0;
}
