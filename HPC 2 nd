HPC 2nd (Bubble Sort)


#include <iostream> 
#include <omp.h> 
using namespace std; 
// Swap two elements 
void swap(int &a, int &b) { 
	int temp = a; 
	a = b; 
	b = temp; 
} 
// Odd-Even Transposition Sort using OpenMP 
void bubble(int *a, int n) { 
	for (int i = 0; i < n; i++) { 
		int phase = i % 2; 
#pragma omp parallel for shared(a, phase) 
		for (int j = phase; j < n - 1; j += 2) { 
			if (a[j] > a[j + 1]) { 
				swap(a[j], a[j + 1]); 
			} 
		} 
	} 
} 
int main() { 
	int *a, n; 
	cout << "\nEnter total number of elements: "; 
	cin >> n; 
	a = new int[n]; 
	cout << "\nEnter elements:\n"; 
	for (int i = 0; i < n; i++) { 
		cin >> a[i]; 
	} 
	bubble(a, n); 
	cout << "\nSorted array:\n"; 
	for (int i = 0; i < n; i++) { 
		cout << a[i] << endl; 
	} 
	delete[] a; 
	return 0; 
} 





HPC 2nd(Merge Sort)



#include <iostream> 
#include <omp.h> 
using namespace std; 
void merge(int* arr, int l, int m, int r) { 
   int i, j, k; 
   int n1 = m - l + 1; 
   int n2 = r - m; 
   int* L = new int[n1]; 
   int* R = new int[n2]; 
   for (i = 0; i < n1; i++) 
     L[i] = arr[l + i]; 
   for (j = 0; j < n2; j++) 
     R[j] = arr[m + 1 + j]; 
   i = 0; 
   j = 0; 
   k = l; 
   while (i < n1 && j < n2) { 
     if (L[i] <= R[j]) { 
	arr[k++] = L[i++]; 
   } else { 
      arr[k++] = R[j++]; 
   } 
} 
while (i < n1) 
  arr[k++] = L[i++]; 
while (j < n2) 
  arr[k++] = R[j++]; 
delete[] L; 
delete[] R; 
} 
void mergeSort(int* arr, int l, int r) { 
    if (l < r) { 
        int m = l + (r - l) / 2; 
 
        #pragma omp parallel sections 
        { 
            #pragma omp section 
            mergeSort(arr, l, m); 
 
            #pragma omp section 
            mergeSort(arr, m + 1, r); 
        } 
 
        merge(arr, l, m, r); 
    } 
} 

int main() {
  int arr[] = { 12, 11, 13, 5, 6, 7 }; 
  int n = sizeof(arr) / sizeof(arr[0]); 
   
 
  cout << "Given array: "; 
  for (int i = 0; i < n; i++) 
  cout << arr[i] << " "; 
  cout << endl;
    double start = omp_get_wtime();

    #pragma omp parallel
    {
        #pragma omp single
        mergeSort(arr, 0, n - 1);
    }

    double end = omp_get_wtime();

    cout << "\nSorted array:\n";
    for (int i = 0; i < n; i++) cout << arr[i] << " ";
    
    cout << "\n\nTime taken: " << (end - start) << " seconds\n";
}





Another code for MERGE SORT


#include <iostream>
#include <omp.h>
using namespace std;

void merge(int arr[], int l, int m, int r) {
    int n1 = m - l + 1, n2 = r - m;
    int L[n1], R[n2];
    for (int i = 0; i < n1; i++) L[i] = arr[l + i];
    for (int i = 0; i < n2; i++) R[i] = arr[m + 1 + i];
    
    int i = 0, j = 0, k = l;
    while (i < n1 && j < n2)
        arr[k++] = (L[i] < R[j]) ? L[i++] : R[j++];
    while (i < n1) arr[k++] = L[i++];
    while (j < n2) arr[k++] = R[j++];
}

void mergeSort(int arr[], int l, int r) {
    if (l >= r) return;
    int m = l + (r - l) / 2;

    #pragma omp parallel sections
    {
        #pragma omp section
        mergeSort(arr, l, m);

        #pragma omp section
        mergeSort(arr, m + 1, r);
    }
    merge(arr, l, m, r);
}

int main() {
    int arr[] = {12,45,3,1,20};
    int n = sizeof(arr) / sizeof(arr[0]);
    cout << "Given array: ";
    for (int i = 0; i < n; i++) 
    cout << arr[i] << " "; 
    cout << endl;



    double start = omp_get_wtime();

    #pragma omp parallel
    {
        #pragma omp single
        mergeSort(arr, 0, n - 1);
    }

    double end = omp_get_wtime();

    cout << "\nSorted array:\n";
    for (int i = 0; i < n; i++) cout << arr[i] << " ";
    
    cout << "\n\nTime taken: " << (end - start) << " seconds\n";
}

