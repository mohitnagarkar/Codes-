

#include<iostream>
#include<queue>
#include<stack>
#include<vector>
using namespace std;

class Graph{
	int V;
	vector<vector<int> >adj;
	public:
		Graph(int v){
			v=v;
			adj=vector<vector<int> >(v);
		}
		void addedge(int u,int v){
			adj[u].push_back(v);
			adj[v].push_back(u);
		}
		void bfs(int start){
			vector<bool>visited(V,false);
			queue<int>q;
			visited[start]=true;
			q.push(start);
			while(!q.empty()){
				int curr=q.front();
				q.pop();
				cout<<curr<<" ";
				for(int i=0;i<adj[curr].size();i++){
					int n=adj[curr][i];
					if(!visited[n]){
						visited[n]=true;
						q.push(n);
					}
				}
			}
		}
		void dfs(int start){
			vector<bool>visited(V,false);
			stack<int>s;
			visited[start]=true;
			s.push(start);
			while(!s.empty()){
				int curr=s.top();
				s.pop();
				cout<<curr<<" ";
				for(int i=0;i<adj[curr].size();i++){
					int n=adj[curr][i];
					if(!visited[n]){
						visited[n]=true;
						s.push(n);
					}
				}
			}
		}
};

int main(){
	int V,E,u,v,start;
	cout<<"Enter the number of vertex and edges: ";
	cin>>V>>E;
	Graph g(V);
	for(int i=0;i<E;i++){
		cout<<"Enter the Edges to To from ";
		cin>>u>>v;
		g.addedge(u,v);
	}
	cout<<"Enter the starting point";
	cin>>start;
	g.bfs(start);
	cout<<endl;
	g.dfs(start);
}
